// <auto-generated />
using System;
using AssetAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetAPI.Migrations
{
    [DbContext(typeof(AssetContext))]
    [Migration("20250414051131_aading asset")]
    partial class aadingasset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetAPI.Modals.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Assets");

                    b.HasDiscriminator().HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AssetAPI.Modals.AssetMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("HardwareId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareLicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HardwareId");

                    b.HasIndex("SoftwareLicenseId");

                    b.ToTable("AssetMappings");
                });

            modelBuilder.Entity("AssetAPI.Modals.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AssetAPI.Modals.Book", b =>
                {
                    b.HasBaseType("AssetAPI.Modals.Asset");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("AssetAPI.Modals.Hardware", b =>
                {
                    b.HasBaseType("AssetAPI.Modals.Asset");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Hardware");
                });

            modelBuilder.Entity("AssetAPI.Modals.SoftwareLicense", b =>
                {
                    b.HasBaseType("AssetAPI.Modals.Asset");

                    b.Property<DateTime>("expiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("licenseKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SoftwareLicense");
                });

            modelBuilder.Entity("AssetAPI.Modals.AssetMapping", b =>
                {
                    b.HasOne("AssetAPI.Modals.Book", "Book")
                        .WithMany("AssetMappings")
                        .HasForeignKey("BookId");

                    b.HasOne("AssetAPI.Modals.Customer", "Customer")
                        .WithMany("AssetMappings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetAPI.Modals.Hardware", "Hardware")
                        .WithMany("AssetMappings")
                        .HasForeignKey("HardwareId");

                    b.HasOne("AssetAPI.Modals.SoftwareLicense", "SoftwareLicense")
                        .WithMany("AssetMappings")
                        .HasForeignKey("SoftwareLicenseId");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Hardware");

                    b.Navigation("SoftwareLicense");
                });

            modelBuilder.Entity("AssetAPI.Modals.Customer", b =>
                {
                    b.Navigation("AssetMappings");
                });

            modelBuilder.Entity("AssetAPI.Modals.Book", b =>
                {
                    b.Navigation("AssetMappings");
                });

            modelBuilder.Entity("AssetAPI.Modals.Hardware", b =>
                {
                    b.Navigation("AssetMappings");
                });

            modelBuilder.Entity("AssetAPI.Modals.SoftwareLicense", b =>
                {
                    b.Navigation("AssetMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
