using ConsoleToWeb;
using static Microsoft.Extensions.Logging.EventSource.LoggingEventSource;

namespace ConsoleToWeb
{
    public class Exceptions
    {
        public void exceptions()
        {
            double a = 98, b = 0;
            double result;

            try
            {
                result = SafeDivision(a, b);
                Console.WriteLine($"{a} divided by {b} = {result}");
            }
            catch (DivideByZeroException)
            {
                Console.WriteLine("Attempted divide by zero.");
            }
        }
        public double SafeDivision(double x, double y)
        {
            if (y == 0)
                throw new DivideByZeroException();
            return x / y;
        }
    }
}


//Exceptions are types that all ultimately derive from System.Exception.
//Exceptions can be explicitly generated by a program by using the throw keyword.
//Code in a finally block is executed regardless of if an exception is thrown.
//Use a finally block to release resources, for example to close any streams
//or files that were opened in the try block.


//Authentication is the process of obtaining some sort of credentials from the users
//and using those credentials to verify the user's identity.
//Authorization is the process of allowing an authenticated user access to resources
//first IIS and then ASP.net gets the chance to authenticate
//< authentication mode = "windows" >
//< authentication mode = "passport" >
//< authentication mode = "forms" > 

//The windows Authentication provider lets you authenticates users based
//on their windows accounts and also have to configure authentication within IIS.
//IIS gives you a choice for four different authentication methods:
//Anonymous, basic digest, and windows integrated

//Passport authentication lets you to use Microsoft's passport service to authenticate
//users of your application. If your users have signed up with passport,
//and you configure the authentication mode of the application to the
//passport authentication, all authentication duties are offloaded to the passport servers.

//Impersonation is a technique that allows the ASP.NET process to act as the authenticated user,
//or as an arbitrary specified user.
